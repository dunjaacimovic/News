//
//  NewsPresenter.swift
//  News
//
//  Created by Dunja Acimovic on 30.05.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class NewsPresenter {

    // MARK: - Private properties -

    private unowned let view: NewsViewInterface
    private let interactor: NewsInteractorInterface
    private let wireframe: NewsWireframeInterface
    private var items: [NewsTableViewCellItem] = [] {
        didSet {
            view.reloadData()
        }
    }

    // MARK: - Lifecycle -

    init(view: NewsViewInterface, interactor: NewsInteractorInterface, wireframe: NewsWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension NewsPresenter: NewsPresenterInterface {
    
    func viewDidLoad() {
        interactor.getTopStories { [weak self] response in
            self?.handleArticleList(from: response)
        }
    }
    
    func numberOfItems() -> Int {
        return items.count
    }
    
    func item(at indexPath: IndexPath) -> NewsTableViewCellItem {
        return items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        wireframe.navigate(to: .article(items[indexPath.row].url))
    }
    
}

private extension NewsPresenter {
    
    func handleArticleList(from result: Result<[Article], Error>) {
        switch result {
        case .success(let articles):
            self.items = articles.map {
                NewsTableViewCellItem(
                    title: $0.title ?? "",
                    description: $0.description ?? "",
                    imageURL: $0.urlToImage ?? "",
                    url: $0.url ?? "",
                    source: $0.source
                )
            }
        case .failure(let error):
            self.wireframe.showErrorAlert(with: error.localizedDescription)
        }
    }
}
