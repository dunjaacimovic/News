//
//  NewsPresenter.swift
//  News
//
//  Created by Dunja Acimovic on 30.05.2021..
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class NewsPresenter {

    // MARK: - Private properties -

    private unowned let view: NewsViewInterface
    private let interactor: NewsInteractorInterface
    private let wireframe: NewsWireframeInterface
    private var items: [Article] = [] { didSet {view.reloadData()} }

    // MARK: - Lifecycle -

    init(view: NewsViewInterface, interactor: NewsInteractorInterface, wireframe: NewsWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension NewsPresenter: NewsPresenterInterface {
    func viewDidLoad() {
        interactor.getTopStories { [weak self] response in
            self?.handleArticleList(from: response)
        }
    }
    
    func numberOfItems() -> Int {
        return items.count
    }
    
    func item(at indexPath: IndexPath) -> NewsViewItemInterface {
        guard let image = items[indexPath.row].image else {
            let url = items[indexPath.row].imageURL
            items[indexPath.row].image =
        }
            
        return items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath){
        let article = items[indexPath.row]
        wireframe.navigate(to: .article(article))
    }
    
}

private extension NewsPresenter {
    
    func handleArticleList(from result: Result<[Article], Error>) {
        switch result {
            case .success(let articles):
                self.items = articles
            case .failure(let error):
                self.wireframe.showErrorAlert(with: error.localizedDescription)
        }
    }
}

